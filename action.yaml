name: queue-for-job-in-run

description: >-
  Queues behind the given job in the given workflow run.
  If the workflow run given is "prev", the action will first try to find the (n - 1) run
  from the workflow running this action.
  The queued workflow running this action will be determined to no longer be queued if the watched job in
  the given workflow run can accept another job using the same concurrency group (i.e. when advancing this
  workflow won't cancel a pending run) along with executing jobs in numerical order.

inputs:
  WORKFLOW_JOB_NAME:
    description: the name of the job that is looked for in the workflow when determining whether to be queued
    type: string
    required: true
  WORKFLOW_RUN_ID:
    description: >-
      the ID of the run to queue behind. a special and default input of "prev" will have this
      action try to find the workflow run that preceeds this one.
    type: string
    required: true
    default: prev
  SECONDS_BETWEEN_GITHUB_REQUESTS:
    description: amount of time in seconds that will pass in between requests to GitHub
    type: string
    required: true
    default: 15

outputs:
  run-id:
    description: the ID of the run that was queued behind (or at least attempted to be)
    value: ${{ steps.get-prev-run.outputs.id || inputs.WORKFLOW_RUN_ID }}

runs:
  using: composite
  steps:
    - name: Determine if first run of workflow
      if: inputs.WORKFLOW_RUN_ID == 'prev'
      shell: bash
      env:
        THIS_RUN_NUMBER: ${{ github.run_number }} # always >= 1
      run: |
        if [[ $THIS_RUN_NUMBER == 1 ]]; then
          echo '::debug::first run of workflow; therefore, no need to queue'
          exit 0
        fi

    - id: calculate-prev-run-number
      if: inputs.WORKFLOW_RUN_ID == 'prev'
      shell: bash
      env:
        THIS_RUN_NUMBER: ${{ github.run_number }} # always > 1
      run: |
        echo "n=$(( $THIS_RUN_NUMBER - 1 ))" | tee -a $GITHUB_OUTPUT

    - id: get-prev-run
      if: inputs.WORKFLOW_RUN_ID == 'prev'
      shell: bash
      env:
        WORKFLOW_NAME: ${{ github.workflow }}
        WORKFLOW_RUN_NUMBER: ${{ steps.calculate-prev-run-number.outputs.n }}
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_TOKEN: ${{ github.token }}
      # unrelated note: can only use {org}/{repo}[/path]@ref format when calling custom actions
      #  e.g. "uses: cawfeecake/actions-concurrency-queue/get-previous-run@main"
      run: ${{ github.action_path }}/find-workflow-run.sh
      # has to output "id"

    - id: watch-loop
      shell: bash
      env:
        JOB_TO_WATCH: ${{ inputs.WORKFLOW_JOB_NAME }}
        RUN_TO_WATCH: ${{ steps.get-prev-run.outputs.id || inputs.WORKFLOW_RUN_ID }}
        SLEEP_AMOUNT: ${{ inputs.SECONDS_BETWEEN_GITHUB_REQUESTS }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        view_run_res=$(mktemp)
        echo "::info::beginning to watch run (ID: $RUN_TO_WATCH)"
        # TODO implement a backoff; if set too low, can blow up your token's rate limits
        sleep_amount="$SLEEP_AMOUNT"
        first_loop=true
        while : ; do
          gh run view -R ${{ github.repository }} \
              "$RUN_TO_WATCH" --json conclusion,jobs,number > $view_run_res
          # <debug>
          echo '[debug]'
          echo "::group::JSON output from \`gh run view ...\` at $(date --iso-8601=seconds)"
          jq . $view_run_res
          echo '::endgroup::'
          # </debug>
          watched_run=$(jq --raw-output '.conclusion' $view_run_res)
          if [[ $watched_run == "" ]]; then
            # first, try to see if the job being queued for has started, and what its current state is...
            jobs=$(jq --compact-output --arg jn "$JOB_TO_WATCH" '.jobs | map(select(.name |
                . == $jn or startswith($jn + " ")))' $view_run_res)
            # jobs that are made up of multiple subjobs will be named in the format <job-name> / <subjob-name>
            if [[ $(jq 'length' <<< $jobs) > 0 ]]; then
              # ... the job has started, so first see if it has finished unsuccessfully...
              failed_or_cancelled_jobs=$(jq 'map(select(
                  .conclusion == "cancelled" or .conclusion == "failure")) | length' <<< $jobs)
              if [[ $failed_or_cancelled_jobs > 0 ]]; then
                echo '::warning::job being watched (or its subjobs) has either failed or been cancelled;' \
                    'cancelling this job...'
                echo 'cancel-this-run=true' | tee -a $GITHUB_OUTPUT
                break # exit loop
              fi
              # ... and then see if it's in a state that will allow this workflow to progress without
              # dequeuing a different pending workflow
              jobs_to_wait_for=$(jq 'map(select(
                  .conclusion != "" or .status == "waiting" | not)) | length' <<< $jobs)
              if [[ $jobs_to_wait_for > 0 ]]; then
                echo "::info::job being watched has $jobs_to_wait_for (sub)jobs before this run can progress;" \
                    "waiting for ${sleep_amount}s..."
                sleep $sleep_amount
              else
                echo '::info::job being watched is in a state where this workflow run can progress'
                break # exit loop
              fi
            else
              echo "::info::job to watch has not yet started; waiting for ${sleep_amount}s..."
              sleep $sleep_amount
            fi
          else
            if $first_loop; then
            echo '::info::no queueing to do as initial encounter with workflow containing job to watch' \
               'shows that it has already concluded'
            else
              if [[ $watched_run == 'cancelled' ]] || [[ $watched_run == 'failure' ]]; then
                echo '::warning::workflow containing job to watch has concluded due to either error' \
                    'or being cancelled; cancelling this job...'
                echo 'cancel-this-run=true' | tee -a $GITHUB_OUTPUT
              else
                echo '::info::workflow containing job to watch has concluded'
              fi
            fi
            break # exit loop
          fi
          first_loop=false
        done

# the following assumptions were made regarding interpreting values for "status":
#
# only when .conclusion != "" (concluded):
# - completed
# - cancelled
# - failure
# - neutral
# - skipped
# - (maybe?) stale
# - success
# - (maybe?) timed_out
#
# only when .conclusion == "" (not concluded):
# - in_progress (happens when a workflow job (steps, too?) is executing)
# - queued (happens when workflow (steps, too?) has been notified to start, but has not yet started
# - waiting (happens when waiting for protected environment requirements to be satisfied)
# - pending (happens when waiting for concurrency group key)
#
# note exactly sure...:
# - action_required, only when concluded? does this happen when a job or step cannot call reusable workflow or action?
# - requested, only when has not concluded? cron related? (similar case to "queued" status?)

    - name: Cancel this workflow run
      if: steps.watch-loop.outputs.cancel-this-run == 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        gh run cancel -R ${{ github.repository }} ${{ github.run_id }}
        echo '::info::successfully cancelled this workflow run'
